{"version":3,"sources":["ToDoInput.js","utils/generateId.js","utils/localStorage.js","reducers/todo.js","ToDo.js","ToDoList.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["ToDoInput","_ref","onAddToDo","_useState","useState","_useState2","Object","slicedToArray","toDoName","setToDoName","react_default","a","createElement","onSubmit","e","preventDefault","trim","type","onChange","target","value","length","generateId","Math","random","toString","substr","setToDosInStorage","toDoData","localStorage","setItem","JSON","stringify","toDoReducer","state","action","newState","payload","concat","toConsumableArray","id","name","completed","map","toDo","objectSpread","filter","console","error","ToDo","onToggleCompleted","onDeleteToDo","className","onClick","aria-label","aria-checked","checked","ToDoList","toDoListData","toDos","src_ToDo","key","react","Footer","rel","href","App","_useReducer","useReducer","getItem","parse","_useReducer2","toDoState","toDoDispatch","src_ToDoInput","newToDoName","src_ToDoList","src_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6LAyBeA,SAvBG,SAAAC,GAAmB,IAAhBC,EAAgBD,EAAhBC,UAAgBC,EACHC,mBAAS,IADNC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAC5BK,EAD4BH,EAAA,GAClBI,EADkBJ,EAAA,GAgBnC,OACEK,EAAAC,EAAAC,cAAA,QAAMC,SAdS,SAAAC,GACfA,EAAEC,iBACFb,EAAUM,EAASQ,QACnBP,EAAY,MAYVC,EAAAC,EAAAC,cAAA,SAAOK,KAAK,OAAOC,SATN,SAAAJ,GACXA,EAAEK,OAAOC,MAAMC,OAAS,IAG5BZ,EAAYK,EAAEK,OAAOC,QAKoBA,MAAOZ,qBCVrCc,EATI,WACjB,MACE,IACAC,KAAKC,SACFC,SAAS,IACTC,OAAO,EAAG,ICAJC,EAAoB,SAAAC,GAC/BC,aAAaC,QAAQ,aAAcC,KAAKC,UAAUJ,KCCvCK,EAAc,SAACC,EAAOC,GACjC,IAAIC,EACJ,OAAQD,EAAOlB,MACb,IAPoB,WAmBlB,OAXIkB,EAAOE,UACTD,EAAQ,GAAAE,OAAAhC,OAAAiC,EAAA,EAAAjC,CACH4B,GADG,CAEN,CACEM,GAAIlB,IACJmB,KAAMN,EAAOE,QACbK,WAAW,KAGff,EAAkBS,IAEbA,EACT,IAnBuB,cA8BrB,OAVAA,EAAWF,EAAMS,IAAI,SAAAC,GACnB,OAAIA,EAAKJ,KAAOL,EAAOE,QACd/B,OAAAuC,EAAA,EAAAvC,CAAA,GACFsC,EADL,CAEEF,WAAYE,EAAKF,YAGdE,IAETjB,EAAkBS,GACXA,EACT,IA9BuB,cAiCrB,OAFAA,EAAWF,EAAMY,OAAO,SAAAF,GAAI,OAAIA,EAAKJ,KAAOL,EAAOE,UACnDV,EAAkBS,GACXA,EACT,QAEE,OADAW,QAAQC,MAAM,iCACPd,ICXEe,EA9BF,SAAAhD,GAA8D,IAA3DuC,EAA2DvC,EAA3DuC,GAAIC,EAAuDxC,EAAvDwC,KAAMC,EAAiDzC,EAAjDyC,UAAWQ,EAAsCjD,EAAtCiD,kBAAmBC,EAAmBlD,EAAnBkD,aAOtD,OACEzC,EAAAC,EAAAC,cAAA,MAAIwC,UAAU,QACZ1C,EAAAC,EAAAC,cAAA,MAAIwC,UAAU,sEACXX,GAEH/B,EAAAC,EAAAC,cAAA,MAAIwC,UAAU,sBACZ1C,EAAAC,EAAAC,cAAA,UAAQwC,UAAU,eAAeC,QATpB,WACjBF,EAAaX,KAQT,MAIF9B,EAAAC,EAAAC,cAAA,MAAIwC,UAAU,sBACZ1C,EAAAC,EAAAC,cAAA,SACEK,KAAK,WACLqC,aAAY,YAAcb,EAC1Bc,eAAcb,EACdxB,SArBgB,WACtBgC,EAAkBV,IAqBZgB,QAASd,OCUJe,EAhCE,SAAAxD,GAAuD,IAApDyD,EAAoDzD,EAApDyD,aAAcR,EAAsCjD,EAAtCiD,kBAAmBC,EAAmBlD,EAAnBkD,aAC7CQ,EACJD,GACAA,EAAarC,OAAS,GACtBqC,EAAaf,IAAI,SAAAC,GAAI,OACnBlC,EAAAC,EAAAC,cAACgD,EAAD,CACEC,IAAKjB,EAAKJ,GACVA,GAAII,EAAKJ,GACTC,KAAMG,EAAKH,KACXC,UAAWE,EAAKF,UAChBQ,kBAAmB,SAAAV,GAAE,OAAIU,EAAkBV,IAC3CW,aAAc,SAAAX,GAAE,OAAIW,EAAaX,QAGvC,OACE9B,EAAAC,EAAAC,cAACkD,EAAA,SAAD,KACEpD,EAAAC,EAAAC,cAAA,MAAIwC,UAAU,+BAAd,SACA1C,EAAAC,EAAAC,cAAA,SAAOwC,UAAU,cACf1C,EAAAC,EAAAC,cAAA,aACG+C,GAGCjD,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,oCCACmD,EAxBA,WACb,OACErD,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,WAASwC,UAAU,eACjB1C,EAAAC,EAAAC,cAAA,OAAKwC,UAAU,mBACb1C,EAAAC,EAAAC,cAAA,mGAEsB,IACpBF,EAAAC,EAAAC,cAAA,KACEO,OAAO,SACP6C,IAAI,sBACJC,KAAK,oCAHP,oCAHF,4GCyDKC,EAlDH,WAAM,IAAAC,EACkBC,qBAChCnC,ELdKJ,aAAawC,QAAQ,cACxBtC,KAAKuC,MAAMzC,aAAawC,QAAQ,eAChC,IKUYE,EAAAjE,OAAAC,EAAA,EAAAD,CAAA6D,EAAA,GACTK,EADSD,EAAA,GACEE,EADFF,EAAA,GA2BhB,OACE7D,EAAAC,EAAAC,cAACkD,EAAA,SAAD,KACEpD,EAAAC,EAAAC,cAAA,OAAKwC,UAAU,OACb1C,EAAAC,EAAAC,cAAA,OAAKwC,UAAU,aACb1C,EAAAC,EAAAC,cAAA,YAEEF,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAC8D,EAAD,CAAWxE,UA5BL,SAAAyE,GACdF,EAAa,CACXxD,KJjBkB,WIkBlBoB,QAASsC,OA0BHjE,EAAAC,EAAAC,cAAA,WAASwC,UAAU,gBACjB1C,EAAAC,EAAAC,cAACgE,EAAD,CACE1B,kBAxBU,SAAAV,GACtBiC,EAAa,CACXxD,KJvBqB,cIwBrBoB,QAASG,KAsBCW,aAlBK,SAAAX,GACjBiC,EAAa,CACXxD,KJ7BqB,cI8BrBoB,QAASG,KAgBCkB,aAAcc,MAIpB9D,EAAAC,EAAAC,cAACiE,EAAD,UC5CUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1E,EAAAC,EAAAC,cAACyE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.71033acc.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst ToDoInput = ({ onAddToDo }) => {\r\n  const [toDoName, setToDoName] = useState('');\r\n\r\n  const onSubmit = e => {\r\n    e.preventDefault();\r\n    onAddToDo(toDoName.trim());\r\n    setToDoName('');\r\n  };\r\n\r\n  const onChange = e => {\r\n    if (e.target.value.length > 25) {\r\n      return;\r\n    }\r\n    setToDoName(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={onSubmit}>\r\n      <input type=\"text\" onChange={onChange} value={toDoName} />\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default ToDoInput;\r\n","// https://gist.github.com/gordonbrander/2230317\r\nconst generateId = () => {\r\n  return (\r\n    '_' +\r\n    Math.random()\r\n      .toString(36)\r\n      .substr(2, 9)\r\n  );\r\n};\r\n\r\nexport default generateId;\r\n","export const getToDosFromStorage = () => {\r\n  return localStorage.getItem('todo-state')\r\n    ? JSON.parse(localStorage.getItem('todo-state'))\r\n    : [];\r\n};\r\n\r\nexport const setToDosInStorage = toDoData => {\r\n  localStorage.setItem('todo-state', JSON.stringify(toDoData));\r\n};\r\n","import generateId from '../utils/generateId';\r\nimport { setToDosInStorage } from '../utils/localStorage';\r\n\r\n// TODO ACTIONS\r\nexport const TODO_ADD = 'TODO_ADD';\r\nexport const TODO_TOGGLE = 'TODO_TOGGLE';\r\nexport const TODO_DELETE = 'TODO_DELETE';\r\n\r\nexport const toDoReducer = (state, action) => {\r\n  let newState;\r\n  switch (action.type) {\r\n    case TODO_ADD:\r\n      if (action.payload) {\r\n        newState = [\r\n          ...state,\r\n          {\r\n            id: generateId(),\r\n            name: action.payload,\r\n            completed: false\r\n          }\r\n        ];\r\n        setToDosInStorage(newState);\r\n      }\r\n      return newState;\r\n    case TODO_TOGGLE:\r\n      newState = state.map(toDo => {\r\n        if (toDo.id === action.payload) {\r\n          return {\r\n            ...toDo,\r\n            completed: !toDo.completed\r\n          };\r\n        }\r\n        return toDo;\r\n      });\r\n      setToDosInStorage(newState);\r\n      return newState;\r\n    case TODO_DELETE:\r\n      newState = state.filter(toDo => toDo.id !== action.payload);\r\n      setToDosInStorage(newState);\r\n      return newState;\r\n    default:\r\n      console.error('Use the action constants bro.');\r\n      return state;\r\n  }\r\n};\r\n","import React from 'react';\r\nconst ToDo = ({ id, name, completed, onToggleCompleted, onDeleteToDo }) => {\r\n  const toggleCompleted = () => {\r\n    onToggleCompleted(id);\r\n  };\r\n  const deleteToDo = () => {\r\n    onDeleteToDo(id);\r\n  };\r\n  return (\r\n    <tr className=\"todo\">\r\n      <td className=\"todo__field--large todo__field--left app__content__text--secondary\">\r\n        {name}\r\n      </td>\r\n      <td className=\"todo__field--small\">\r\n        <button className=\"todo__delete\" onClick={deleteToDo}>\r\n          X\r\n        </button>\r\n      </td>\r\n      <td className=\"todo__field--small\">\r\n        <input\r\n          type=\"checkbox\"\r\n          aria-label={'complete ' + name}\r\n          aria-checked={completed}\r\n          onChange={toggleCompleted}\r\n          checked={completed}\r\n        />\r\n      </td>\r\n    </tr>\r\n  );\r\n};\r\n\r\nexport default ToDo;\r\n","import React, { Fragment } from 'react';\r\nimport ToDo from './ToDo';\r\nconst ToDoList = ({ toDoListData, onToggleCompleted, onDeleteToDo }) => {\r\n  const toDos =\r\n    toDoListData &&\r\n    toDoListData.length > 0 &&\r\n    toDoListData.map(toDo => (\r\n      <ToDo\r\n        key={toDo.id}\r\n        id={toDo.id}\r\n        name={toDo.name}\r\n        completed={toDo.completed}\r\n        onToggleCompleted={id => onToggleCompleted(id)}\r\n        onDeleteToDo={id => onDeleteToDo(id)}\r\n      />\r\n    ));\r\n  return (\r\n    <Fragment>\r\n      <h2 className=\"app__content__text--primary\">To Do</h2>\r\n      <table className=\"todo__list\">\r\n        <tbody>\r\n          {toDos ? (\r\n            toDos\r\n          ) : (\r\n            <tr>\r\n              <td>Nothing ToDo Yet!</td>\r\n            </tr>\r\n          )}\r\n        </tbody>\r\n      </table>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default ToDoList;\r\n","import React from 'react';\r\nconst Footer = () => {\r\n  return (\r\n    <footer>\r\n      <section className=\"app__footer\">\r\n        <div className=\"footer__contain\">\r\n          <p>\r\n            If you somehow got to this page, I just use this for my to do list.\r\n            I took styling from{' '}\r\n            <a\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n              href=\"https://oldschool.runescape.com/\"\r\n            >\r\n              https://oldschool.runescape.com/\r\n            </a>\r\n            . All of the styles and images you see here, were created by the\r\n            fantastic team over there at Jagex.\r\n          </p>\r\n        </div>\r\n      </section>\r\n    </footer>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import React, { useReducer, Fragment } from 'react';\nimport './App.css';\nimport ToDoInput from './ToDoInput';\nimport {\n  toDoReducer,\n  TODO_ADD,\n  TODO_TOGGLE,\n  TODO_DELETE\n} from './reducers/todo';\nimport { getToDosFromStorage } from './utils/localStorage';\nimport ToDoList from './ToDoList';\nimport Footer from './Footer';\n\nconst App = () => {\n  const [toDoState, toDoDispatch] = useReducer(\n    toDoReducer,\n    getToDosFromStorage()\n  );\n\n  const addToDo = newToDoName => {\n    toDoDispatch({\n      type: TODO_ADD,\n      payload: newToDoName\n    });\n  };\n\n  const toggleCompleted = id => {\n    toDoDispatch({\n      type: TODO_TOGGLE,\n      payload: id\n    });\n  };\n\n  const deleteToDo = id => {\n    toDoDispatch({\n      type: TODO_DELETE,\n      payload: id\n    });\n  };\n\n  return (\n    <Fragment>\n      <div className=\"app\">\n        <div className=\"app__wrap\">\n          <main>\n            {/* Put this in header component, make it more like osrs site style. */}\n            <h1>Ye Ol' ToDo</h1>\n            <ToDoInput onAddToDo={addToDo} />\n            <section className=\"app__content\">\n              <ToDoList\n                onToggleCompleted={toggleCompleted}\n                onDeleteToDo={deleteToDo}\n                toDoListData={toDoState}\n              />\n            </section>\n          </main>\n          <Footer />\n        </div>\n      </div>\n    </Fragment>\n  );\n};\n\nexport default App;\n\n// Color toggle using css variables ::root**\n// Local storage**\n// Unit tests**\n// Accessible**\n\n// eventually drag / droppable?\n// useContext?\n\n// Credit https://favicon.io/emoji-favicons/white-heavy-check-mark/\n// CRA\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}